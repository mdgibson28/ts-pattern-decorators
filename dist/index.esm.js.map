{"version":3,"file":"index.esm.js","sources":["../src/Decorators/JsonBuilder/JsonBuilder.ts","../src/Decorators/Observable/Observable.ts"],"sourcesContent":["type ObjectConstructor = new (...args: unknown[]) => unknown;\n\n/**\n * Sets the value of a property on a target object.\n * If the value is an array, it will iterate over the array and create a new instance of the buildClass for each item.\n * If the value is not an array, it will create a new instance of the buildClass and assign the value to it.\n * If the value is already an instance of the buildClass, it will assign the value to the target object.\n * @param buildClass The class to use to build the value.\n * @param target The object on which to set the property.\n * @param pKey The name of the property to set.\n * @param val The value to set on the target object.\n */\nfunction setValue(buildClass:ObjectConstructor, target:any, pKey:string, val:any):void {\n    if(Array.isArray(val) && val.length > 0 && !(val[0] instanceof buildClass)) {\n        target[pKey] = val.map((item) => {\n            const instance = new buildClass();\n            Object.assign(instance, item);\n            return instance;\n        });\n    } else if(!Array.isArray(val) && !(val instanceof buildClass)) {\n        target[pKey] = new buildClass();\n        Object.assign(target[pKey], val);\n    } else {\n        target[pKey] = val;\n    }\n}\n\n/**\n * Decorator that will build an Object from a JSON object.\n * @param buildClass The class to use to build the value.\n * @param buildClass \n * @returns returns a factory for the property descriptor\n * @example @JsonBuilder(MyClass) myProperty:MyClass;\n */\nexport function JsonBuilder(buildClass:ObjectConstructor):  (target:unknown, key:string) => void {\n    return function(target:unknown, key:string):void {\n\n        const pKey:string = '_' + key;\n\n        Object.defineProperty(target, pKey, {\n            enumerable: false,\n            configurable: true,\n            writable: true\n        });\n\n        Object.defineProperty(target, key, {\n            enumerable:true,\n            get: function() {\n                return this[pKey];\n            },\n            set: function(val) {\n                setValue(buildClass, this, pKey, val);\n            }\n        });\n    }\n}\n\n\n","/**\n * @description A decorator that turns a property into an observable.\n * @example @Observable<string> public test: Observer<string>;\n * @param target \n * @param key \n */\nexport function Observable<T>(target:object, key:string):void {\n    const pKey:string = '_' + key;\n    const subscriptionsKey:string =  pKey + '::subscriptions';\n    const valueKey:string = pKey + '::value';\n    const previousValueKey:string = pKey + '::previousValue';\n\n    target[subscriptionsKey] = [];\n    target[key] = {\n        subscribe: (callback:(newVal:T, prevVal?:T) => unknown):Subscription => {\n            target[subscriptionsKey].push(callback);\n            return {\n                unsubscribe() {\n                    target[subscriptionsKey] = target[subscriptionsKey].filter((subscription:any) => {\n                        return subscription !== callback;\n                    });\n                }\n            };\n        },\n        next: (newValue:T) => {\n            target[previousValueKey] = target[valueKey];\n            target[valueKey] = newValue;\n            for(const subscription of target[subscriptionsKey]) {\n                subscription(newValue, target[previousValueKey]);\n            }\n        },\n        current: ():T => {\n            return target[valueKey];\n        },\n        previous: ():T => {\n            return target[previousValueKey];\n        }\n    }\n}\n\n/**\n * @description A subscription to an observer.\n */\nexport interface Subscription {\n    /**\n     * @description Unsubscribe from the observer.\n     * @example const subscription = this.test.subscribe((newVal, prevVal) => {\n     *    ...\n     * });\n     * \n     * @returns Unsubscribe from the observer. \n     */\n    unsubscribe: () => void;\n}\n\n/**\n * @description An observer that manages the state of a property and notifies subscribers when the state changes.\n * @example @Observable<string> public test: Observer<string>;\n */\nexport interface Observer<T> {\n    /**\n     * @description Subscribe to the observer. \n     * @param callback\n     * @example this.test.subscribe((newVal, prevVal) => {\n     *     console.log('new value:', newVal);\n     *     console.log('previous value:', prevVal);\n     * });\n     * @returns A subscription to the observer.  \n     */\n    subscribe: (callback:(newVal:T, prevVal?:T) => unknown) => Subscription;\n    /**\n     * @description Update the value of the observer and notify subscribers.\n     * #example this.test.next('new value');\n     * @param newValue \n     * @returns\n     */\n    next: (newValue:T) => void;\n    /**\n     * @description Get the current value of the observer.\n     * @example const currentValue = this.test.current();\n     * @returns The current value of the observer.\n     */\n    current: () => T;\n    /**\n     * @description Get the previous value of the observer.\n     * @example const prevValue = this.test.previous();\n     * @returns The previous value of the observer. \n     */\n    previous: () => T;\n}"],"names":["JsonBuilder","buildClass","target","key","pKey","Object","defineProperty","enumerable","configurable","writable","get","this","set","val","Array","isArray","length","map","item","instance","assign","setValue","Observable","subscriptionsKey","valueKey","previousValueKey","subscribe","callback","push","unsubscribe","filter","subscription","next","newValue","_i","_a","current","previous"],"mappings":"AAkCM,SAAUA,EAAYC,GACxB,OAAO,SAASC,EAAgBC,GAE5B,IAAMC,EAAc,IAAMD,EAE1BE,OAAOC,eAAeJ,EAAQE,EAAM,CAChCG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGdJ,OAAOC,eAAeJ,EAAQC,EAAK,CAC/BI,YAAW,EACXG,IAAK,WACD,OAAOC,KAAKP,EACf,EACDQ,IAAK,SAASC,IAtC1B,SAAkBZ,EAA8BC,EAAYE,EAAaS,GAClEC,MAAMC,QAAQF,IAAQA,EAAIG,OAAS,KAAOH,EAAI,aAAcZ,GAC3DC,EAAOE,GAAQS,EAAII,KAAI,SAACC,GACpB,IAAMC,EAAW,IAAIlB,EAErB,OADAI,OAAOe,OAAOD,EAAUD,GACjBC,CACX,IACOL,MAAMC,QAAQF,IAAUA,aAAeZ,EAI9CC,EAAOE,GAAQS,GAHfX,EAAOE,GAAQ,IAAIH,EACnBI,OAAOe,OAAOlB,EAAOE,GAAOS,GAIpC,CA0BgBQ,CAASpB,EAAYU,KAAMP,EAAMS,EACpC,GAET,CACJ,CCjDgB,SAAAS,EAAcpB,EAAeC,GACzC,IAAMC,EAAc,IAAMD,EACpBoB,EAA2BnB,EAAO,kBAClCoB,EAAkBpB,EAAO,UACzBqB,EAA0BrB,EAAO,kBAEvCF,EAAOqB,GAAoB,GAC3BrB,EAAOC,GAAO,CACVuB,UAAW,SAACC,GAER,OADAzB,EAAOqB,GAAkBK,KAAKD,GACvB,CACHE,YAAW,WACP3B,EAAOqB,GAAoBrB,EAAOqB,GAAkBO,QAAO,SAACC,GACxD,OAAOA,IAAiBJ,CAC5B,GACH,EAER,EACDK,KAAM,SAACC,GACH/B,EAAOuB,GAAoBvB,EAAOsB,GAClCtB,EAAOsB,GAAYS,EACnB,IAA0B,IAAAC,EAAA,EAAAC,EAAAjC,EAAOqB,GAAPW,EAAAC,EAAAnB,OAAAkB,IAA0B,EAChDH,EADkBI,EAAAD,IACLD,EAAU/B,EAAOuB,GACjC,CACJ,EACDW,QAAS,WACL,OAAOlC,EAAOsB,EACjB,EACDa,SAAU,WACN,OAAOnC,EAAOuB,EACjB,EAET"}