{"version":3,"file":"index.cjs.js","sources":["../src/Decorators/JsonBuilder.ts"],"sourcesContent":["type ObjectConstructor = new (...args: unknown[]) => unknown;\n\n/**\n * Sets the value of a property on a target object.\n * If the value is an array, it will iterate over the array and create a new instance of the buildClass for each item.\n * If the value is not an array, it will create a new instance of the buildClass and assign the value to it.\n * If the value is already an instance of the buildClass, it will assign the value to the target object.\n * @param buildClass The class to use to build the value.\n * @param target The object on which to set the property.\n * @param pKey The name of the property to set.\n * @param val The value to set on the target object.\n */\nfunction setValue(buildClass:ObjectConstructor, target:any, pKey:string, val:any):void {\n    if(Array.isArray(val) && val.length > 0 && !(val[0] instanceof buildClass)) {\n        target[pKey] = val.map((item) => {\n            const instance = new buildClass();\n            Object.assign(instance, item);\n            return instance;\n        });\n    } else if(!Array.isArray(val) && !(val instanceof buildClass)) {\n        target[pKey] = new buildClass(val);\n    } else {\n        target[pKey] = val;\n    }\n}\n\n/**\n * Decorator that will build an Object from a JSON object.\n * @param buildClass The class to use to build the value.\n * @param buildClass \n * @returns returns a factory for the property descriptor\n * @example @JsonBuilder(MyClass) myProperty:MyClass;\n */\nexport function JsonBuilder(buildClass:ObjectConstructor):  (target:unknown, key:string) => void {\n    return function(target:unknown, key:string):void {\n\n        const pKey:string = '_' + key;\n\n        Object.defineProperty(target, pKey, {\n            enumerable: false,\n            configurable: true,\n            writable: true\n        });\n\n        Object.defineProperty(target, key, {\n            enumerable:true,\n            get: function() {\n                return this[pKey];\n            },\n            set: function(val) {\n                setValue(buildClass, this, pKey, val);\n            }\n        });\n    }\n}\n\n\n"],"names":["buildClass","target","key","pKey","Object","defineProperty","enumerable","configurable","writable","get","this","set","val","Array","isArray","length","map","item","instance","assign","setValue"],"mappings":"wFAiCM,SAAsBA,GACxB,OAAO,SAASC,EAAgBC,GAE5B,IAAMC,EAAc,IAAMD,EAE1BE,OAAOC,eAAeJ,EAAQE,EAAM,CAChCG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGdJ,OAAOC,eAAeJ,EAAQC,EAAK,CAC/BI,YAAW,EACXG,IAAK,WACD,OAAOC,KAAKP,EACf,EACDQ,IAAK,SAASC,IArC1B,SAAkBZ,EAA8BC,EAAYE,EAAaS,GAClEC,MAAMC,QAAQF,IAAQA,EAAIG,OAAS,KAAOH,EAAI,aAAcZ,GAC3DC,EAAOE,GAAQS,EAAII,KAAI,SAACC,GACpB,IAAMC,EAAW,IAAIlB,EAErB,OADAI,OAAOe,OAAOD,EAAUD,GACjBC,CACX,IACOL,MAAMC,QAAQF,IAAUA,aAAeZ,EAG9CC,EAAOE,GAAQS,EAFfX,EAAOE,GAAQ,IAAIH,EAAWY,EAItC,CA0BgBQ,CAASpB,EAAYU,KAAMP,EAAMS,EACpC,GAET,CACJ"}